// ⚠️ WARNING: FACEBOOK OAUTH IS WORKING - DO NOT MODIFY WITHOUT BACKUP
// ✅ Status: WORKING as of 2025-06-13
// ✅ Features: Personal account + Business pages fetching + appsecret_proof
// ✅ Fixed issues: Removed deprecated 'perms' field, always fetch pages
// 🚫 DO NOT TOUCH UNLESS ABSOLUTELY NECESSARY

import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import authOptions from '@/lib/auth';
import { supabase, supabaseAdmin } from '@/lib/supabase';

// Force dynamic rendering
export const dynamic = 'force-dynamic';

// Facebook OAuth callback
export async function GET(request: NextRequest) {
  console.log('🔵 [FACEBOOK OAUTH] Callback starting...');
  console.log('🔵 [FACEBOOK OAUTH] Request URL:', request.url);
  console.log('🔵 [FACEBOOK OAUTH] Request method:', request.method);
  
  const session = await getServerSession(authOptions);
  console.log('🔵 [FACEBOOK OAUTH] Session check:', {
    hasSession: !!session,
    hasUser: !!session?.user,
    userId: session?.user?.id,
    userEmail: session?.user?.email
  });
  
  if (!session?.user?.id) {
    console.error('Facebook OAuth callback: No user session found');
    return NextResponse.redirect(new URL(`${process.env.NEXTAUTH_URL}/login`));
  }

  const searchParams = request.nextUrl.searchParams;
  const code = searchParams.get('code');
  const error = searchParams.get('error');
  const state = searchParams.get('state');

  console.log('🔵 [FACEBOOK OAUTH] URL parameters:', {
    hasCode: !!code,
    codePreview: code ? code.substring(0, 20) + '...' : 'None',
    error: error,
    state: state,
    allParams: Object.fromEntries(searchParams.entries())
  });

  if (error) {
    console.error('🔴 [FACEBOOK OAUTH] Error from Facebook:', error);
    return NextResponse.redirect(new URL(`${process.env.NEXTAUTH_URL}/settings?error=facebook_auth_failed&fb_error=${encodeURIComponent(error)}`));
  }

  if (!code) {
    console.error('🔴 [FACEBOOK OAUTH] No authorization code received');
    return NextResponse.redirect(new URL(`${process.env.NEXTAUTH_URL}/settings?error=no_code`));
  }

  try {
    console.log('Facebook OAuth: Exchanging code for access token');
    
    // Use consistent environment variables - prioritize FACEBOOK_* over META_*
    const clientId = process.env.FACEBOOK_APP_ID || process.env.META_CLIENT_ID;
    const clientSecret = process.env.FACEBOOK_APP_SECRET || process.env.META_CLIENT_SECRET;
    const redirectUri = `${(process.env.NEXTAUTH_URL || '').replace(/\/$/, '')}/api/oauth/facebook/callback`;

    if (!clientId || !clientSecret) {
      console.error('Facebook OAuth: Missing client credentials');
      throw new Error('Missing Facebook client credentials');
    }

    console.log('🔵 [FACEBOOK OAUTH] Using credentials - Client ID:', clientId?.substring(0, 8) + '***');
    console.log('🔵 [FACEBOOK OAUTH] Redirect URI being used:', redirectUri);

    // Build the token exchange URL
    const tokenUrl = new URL('https://graph.facebook.com/v23.0/oauth/access_token');
    tokenUrl.searchParams.set('client_id', clientId);
    tokenUrl.searchParams.set('client_secret', clientSecret);
    tokenUrl.searchParams.set('redirect_uri', redirectUri);
    tokenUrl.searchParams.set('code', code);

    console.log('🔵 [FACEBOOK OAUTH] Making token request to Facebook Graph API');
    console.log('🔵 [FACEBOOK OAUTH] Token URL:', tokenUrl.toString().replace(/client_secret=[^&]*/, 'client_secret=***'));

    const tokenResponse = await fetch(tokenUrl.toString(), {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      },
    });

    console.log('🔵 [FACEBOOK OAUTH] Token response status:', tokenResponse.status);
    console.log('🔵 [FACEBOOK OAUTH] Token response headers:', Object.fromEntries(tokenResponse.headers.entries()));

    if (!tokenResponse.ok) {
      const errorText = await tokenResponse.text();
      console.error('🔴 [FACEBOOK OAUTH] Token error response:', errorText);
      console.error('🔴 [FACEBOOK OAUTH] Token error status:', tokenResponse.status);
      console.error('🔴 [FACEBOOK OAUTH] Token error headers:', Object.fromEntries(tokenResponse.headers.entries()));
      throw new Error(`Facebook token exchange failed: ${tokenResponse.status} - ${errorText}`);
    }

    const tokenData = await tokenResponse.json();
    console.log('🟢 [FACEBOOK OAUTH] Token data received:', {
      has_access_token: !!tokenData.access_token,
      access_token_preview: tokenData.access_token ? tokenData.access_token.substring(0, 20) + '...' : 'None',
      expires_in: tokenData.expires_in,
      token_type: tokenData.token_type,
      full_response_keys: Object.keys(tokenData)
    });

    if (!tokenData.access_token) {
      console.error('Facebook OAuth: No access token in response');
      throw new Error('No access token received from Facebook');
    }

    // Get user information from Facebook
    console.log('Facebook OAuth: Fetching user profile from Facebook Graph API');
    
    // Create appsecret_proof for secure API calls
    const crypto = require('crypto');
    const appsecret_proof = crypto
      .createHmac('sha256', clientSecret)
      .update(tokenData.access_token)
      .digest('hex');
    
    const userResponse = await fetch(`https://graph.facebook.com/me?access_token=${tokenData.access_token}&appsecret_proof=${appsecret_proof}&fields=id,name`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      },
    });

    if (!userResponse.ok) {
      const userErrorText = await userResponse.text();
      console.error('Facebook OAuth user profile error response:', userErrorText);
      throw new Error(`Failed to fetch user profile: ${userResponse.status} - ${userErrorText}`);
    }

    const userData = await userResponse.json();
    console.log('Facebook OAuth: User data received:', {
      has_id: !!userData.id,
      has_name: !!userData.name,
      user_id: userData.id
    });

    if (!userData.id) {
      console.error('Facebook OAuth: No user ID in profile response');
      throw new Error('No user ID received from Facebook');
    }

    // Get the workspace ID for this user using the API endpoint pattern
    console.log('Facebook OAuth: Getting workspace ID');
    let workspaceId = null;
    
    try {
      const { data: workspaces, error: workspaceError } = await supabaseAdmin
        .from('team_members')
        .select('workspace_id, workspaces(id, name)')
        .eq('user_id', session.user.id)
        .neq('workspace_id', '4251bc40-5a36-493a-9f85-eb728c4d86fa'); // Filter out deleted workspace
        
      if (workspaceError) {
        console.error('Facebook OAuth: Error fetching workspaces:', workspaceError);
        throw new Error('Failed to fetch user workspaces');
      }
      
      if (workspaces && workspaces.length > 0) {
        workspaceId = workspaces[0].workspace_id;
      }
    } catch (error) {
      console.error('Facebook OAuth: Error getting workspace:', error);
    }
    
    if (!workspaceId) {
      console.error('Facebook OAuth: No active workspace found for user');
      throw new Error('No active workspace found for user');
    }

    // Store the access token in the database
    console.log('Facebook OAuth: Saving connection to database');
    
    // Calculate expiration time (Facebook tokens are typically long-lived)
    const expiresAt = tokenData.expires_in 
      ? new Date(Date.now() + tokenData.expires_in * 1000).toISOString()
      : new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString(); // 60 days if no expiry provided
    
    console.log('🔵 [FACEBOOK OAUTH] Attempting to save to database:', {
      user_id: session.user.id,
      workspace_id: workspaceId,
      platform: 'facebook',
      account_id: userData.id,
      account_name: userData.name || 'Facebook Account',
      has_access_token: !!tokenData.access_token,
      token_expires_at: expiresAt
    });

    const { data: insertData, error: dbError } = await supabaseAdmin
      .from('social_accounts')
      .upsert({
        user_id: session.user.id,
        workspace_id: workspaceId,
        platform: 'facebook',
        access_token: tokenData.access_token,
        account_id: userData.id, // Use actual Facebook user ID
        account_name: userData.name || 'Facebook Account',
        is_connected: true,
        token_expires_at: expiresAt,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'workspace_id,platform,account_id'
      })
      .select();

    if (dbError) {
      console.error('🔴 [FACEBOOK OAUTH] Database error:', dbError);
      console.error('🔴 [FACEBOOK OAUTH] Database error details:', {
        code: dbError.code,
        message: dbError.message,
        details: dbError.details,
        hint: dbError.hint
      });
      throw new Error(`Failed to save Facebook connection: ${dbError.message}`);
    }

    console.log('🟢 [FACEBOOK OAUTH] Successfully saved to database:', {
      insertedRecords: insertData?.length || 0,
      insertedData: insertData
    });

    // Check what permissions were actually granted
    console.log('Facebook OAuth: Checking granted permissions');
    const permissionsResponse = await fetch(`https://graph.facebook.com/me/permissions?access_token=${tokenData.access_token}&appsecret_proof=${appsecret_proof}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      },
    });

    let grantedPermissions: string[] = ['public_profile', 'email'];
    let hasBusinessPermissions = false;
    
    if (permissionsResponse.ok) {
      const permData = await permissionsResponse.json();
      grantedPermissions = permData.data
        ?.filter((perm: any) => perm.status === 'granted')
        ?.map((perm: any) => perm.permission) || ['public_profile', 'email'];
      
      hasBusinessPermissions = grantedPermissions.some(perm => 
        ['pages_show_list', 'pages_read_engagement', 'pages_manage_posts', 'business_management'].includes(perm)
      );
      
      console.log('Facebook OAuth: Granted permissions:', grantedPermissions);
      console.log('Facebook OAuth: Has business permissions:', hasBusinessPermissions);
    }

    console.log('Facebook OAuth: Connection saved successfully');
    
    // ALWAYS try to fetch Facebook pages - Facebook may allow access even with basic permissions
    console.log('🔵 [FACEBOOK OAUTH] Attempting to fetch Facebook pages (regardless of permission level)');
    
    try {
      // Create appsecret_proof for pages API call
      const pagesAppsecretProof = crypto
        .createHmac('sha256', clientSecret)
        .update(tokenData.access_token)
        .digest('hex');
        
      console.log('🔵 [FACEBOOK OAUTH] Making pages API request with appsecret_proof');
      
      // Request pages with access tokens included
      const pagesResponse = await fetch(`https://graph.facebook.com/me/accounts?fields=id,name,access_token,category&access_token=${tokenData.access_token}&appsecret_proof=${pagesAppsecretProof}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
      });

      console.log('🔵 [FACEBOOK OAUTH] Pages API response status:', pagesResponse.status);
      
      if (pagesResponse.ok) {
        const pagesData = await pagesResponse.json();
        console.log('🟢 [FACEBOOK OAUTH] Found', pagesData.data?.length || 0, 'Facebook pages');
        console.log('🔵 [FACEBOOK OAUTH] Pages data:', JSON.stringify(pagesData.data, null, 2));
        
        if (pagesData.data && pagesData.data.length > 0) {
          // Save each page as a separate social account
          for (const page of pagesData.data) {
            console.log('🔵 [FACEBOOK OAUTH] Processing page:', {
              id: page.id,
              name: page.name,
              has_access_token: !!page.access_token,
              access_token_preview: page.access_token ? page.access_token.substring(0, 20) + '...' : 'None',
              category: page.category
            });
            const { data: pageInsertData, error: pageError } = await supabaseAdmin
              .from('social_accounts')
              .upsert({
                user_id: session.user.id,
                workspace_id: workspaceId,
                platform: 'facebook',
                access_token: page.access_token || tokenData.access_token, // Use page token if available
                account_id: page.id,
                account_name: `${page.name} (Page)`,
                is_connected: true,
                token_expires_at: expiresAt,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              }, {
                onConflict: 'workspace_id,platform,account_id'
              })
              .select();

            if (pageError) {
              console.error('🔴 [FACEBOOK OAUTH] Error saving page:', page.name, pageError);
              console.error('🔴 [FACEBOOK OAUTH] Page error details:', {
                code: pageError.code,
                message: pageError.message,
                details: pageError.details
              });
            } else {
              console.log('🟢 [FACEBOOK OAUTH] Successfully saved page:', page.name);
              console.log('🔵 [FACEBOOK OAUTH] Page save result:', pageInsertData);
            }
          }
        } else {
          console.log('🟡 [FACEBOOK OAUTH] No Facebook pages found for this account');
        }
      } else {
        const pagesErrorText = await pagesResponse.text();
        console.error('🔴 [FACEBOOK OAUTH] Failed to fetch pages:', pagesResponse.status);
        console.error('🔴 [FACEBOOK OAUTH] Pages error response:', pagesErrorText);
        
        // Don't throw error - just log it and continue
        console.log('🟡 [FACEBOOK OAUTH] Continuing without pages due to API error');
      }
    } catch (pagesError) {
      console.error('🔴 [FACEBOOK OAUTH] Error fetching pages:', pagesError);
      if (pagesError instanceof Error) {
        console.error('🔴 [FACEBOOK OAUTH] Pages error details:', {
          name: pagesError.name,
          message: pagesError.message,
          stack: pagesError.stack
        });
      }
      // Don't throw error - just log it and continue
      console.log('🟡 [FACEBOOK OAUTH] Continuing without pages due to fetch error');
    }
    
    // Determine redirect based on what we actually achieved
    if (hasBusinessPermissions) {
      console.log('Facebook OAuth: Business permissions granted, ready for posting');
      return NextResponse.redirect(new URL(`${process.env.NEXTAUTH_URL}/social-media?success=facebook_connected&business_ready=true`));
    } else {
      console.log('Facebook OAuth: Basic permissions granted, offering upgrade');
      return NextResponse.redirect(new URL(`${process.env.NEXTAUTH_URL}/social-media?success=facebook_connected&upgrade_needed=true`));
    }
  } catch (error: any) {
    console.error('Facebook OAuth callback error:', error);
    console.error('Facebook OAuth error stack:', error.stack);
    return NextResponse.redirect(new URL(`${process.env.NEXTAUTH_URL}/settings?error=facebook_auth_failed&details=${encodeURIComponent(error.message || 'Unknown error')}`));
  }
} 