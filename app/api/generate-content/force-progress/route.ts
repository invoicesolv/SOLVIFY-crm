import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import authOptions from '@/lib/auth';
import { createClient } from '@supabase/supabase-js';

// Create Supabase admin client with service role key
function getSupabaseAdmin() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !supabaseKey) {
    console.error('Missing required environment variables: NEXT_PUBLIC_SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY');
    return null;
  }
  
  return createClient(supabaseUrl, supabaseKey);
}

export async function POST(req: Request) {
  try {
    // Verify authentication
    const session = await getServerSession(authOptions);
    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Parse request
    const body = await req.json();
    
    // Validate required fields
    if (!body.recordId) {
      return NextResponse.json({ error: 'Record ID is required' }, { status: 400 });
    }
    
    const progress = parseInt(body.progress || '0', 10);
    if (isNaN(progress) || progress < 0 || progress > 100) {
      return NextResponse.json({ error: 'Progress must be a number between 0 and 100' }, { status: 400 });
    }
    
    // Use admin client to update progress
    const supabaseAdmin = getSupabaseAdmin();
    if (!supabaseAdmin) {
      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });
    }
    
    const updateData: any = {
      generation_progress: progress,
      updated_at: new Date().toISOString()
    };
    
    // Also update status if complete
    if (progress === 100) {
      updateData.status = 'success';
      
      // Add dummy content if not provided
      if (!body.content) {
        updateData.content = `# Sample Generated Content

This is sample content that was manually completed for testing purposes.

## Key Points

- This content was not actually generated by AI
- It was manually marked as complete
- The progress was forced to 100%

## Next Steps

1. Test if the real-time updates are working
2. Check if the frontend displays the completed status
3. Fix any issues with the OpenAI integration`;
      } else {
        updateData.content = body.content;
      }
    }
    
    // Update the record
    const { data, error } = await supabaseAdmin
      .from('generated_content')
      .update(updateData)
      .eq('id', body.recordId)
      .select('id, generation_progress, status')
      .single();
    
    if (error) {
      console.error('Error updating progress:', error);
      return NextResponse.json({ error: 'Failed to update progress' }, { status: 500 });
    }
    
    return NextResponse.json({
      success: true,
      record: data,
      message: `Progress successfully updated to ${progress}%`
    });
    
  } catch (error) {
    console.error('Error in force-progress endpoint:', error);
    return NextResponse.json({ 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }, { status: 500 });
  }
} 