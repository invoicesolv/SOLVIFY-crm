import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import nodemailer from 'nodemailer';

export const dynamic = 'force-dynamic';

// Create reusable transporter object using SMTP transport
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER || 'kevin@solvify.se',
    pass: process.env.GMAIL_APP_PASSWORD
  }
});

export async function GET(request: NextRequest) {
  try {
    // Verify cron secret to ensure this is called by the cron service
    const authHeader = request.headers.get('authorization');
    if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const currentDay = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
    const currentHour = new Date().getHours();

    // Get all active project report jobs that should run now
    const { data: jobs, error } = await supabase
      .from('cron_jobs')
      .select(`
        id,
        property_id,
        user_id,
        settings,
        next_run
      `)
      .eq('status', 'active')
      .eq('job_type', 'project_report')
      .eq('settings->send_day', currentDay)
      .eq('settings->send_time', `${currentHour}:00`);

    if (error) {
      console.error('Error fetching cron jobs:', error);
      return NextResponse.json({ error: 'Database error' }, { status: 500 });
    }

    if (!jobs || jobs.length === 0) {
      return NextResponse.json({ message: 'No reports to send' });
    }

    // Send reports for each job
    const sendPromises = jobs.map(async (job) => {
      try {
        // Get project details
        const { data: project } = await supabase
          .from('projects')
          .select('*')
          .eq('id', job.property_id)
          .single();

        if (!project) {
          throw new Error(`Project not found: ${job.property_id}`);
        }

        // Get project tasks
        const { data: tasks } = await supabase
          .from('project_tasks')
          .select('*')
          .eq('project_id', job.property_id)
          .order('created_at', { ascending: false });

        // Generate report HTML
        const html = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h1 style="color: #333;">${project.name} - Project Report</h1>
            <p style="color: #666;">Generated on ${new Date().toLocaleDateString()}</p>

            <div style="margin: 20px 0;">
              <h2 style="color: #333;">Project Overview</h2>
              <ul style="list-style: none; padding: 0;">
                <li>Status: ${project.status}</li>
                <li>Customer: ${project.customer_name || 'N/A'}</li>
                <li>Start Date: ${project.start_date ? new Date(project.start_date).toLocaleDateString() : 'N/A'}</li>
                <li>End Date: ${project.end_date ? new Date(project.end_date).toLocaleDateString() : 'N/A'}</li>
              </ul>
            </div>

            <div style="margin: 20px 0;">
              <h2 style="color: #333;">Tasks (${tasks?.length || 0})</h2>
              ${tasks?.map(task => `
                <div style="margin: 10px 0; padding: 10px; background: #f5f5f5; border-radius: 4px;">
                  <h3 style="margin: 0; color: #333;">${task.title}</h3>
                  <p style="margin: 5px 0; color: #666;">Progress: ${task.progress}%</p>
                  ${task.deadline ? `<p style="margin: 5px 0; color: #666;">Deadline: ${new Date(task.deadline).toLocaleDateString()}</p>` : ''}
                  ${task.checklist?.length ? `
                    <div style="margin-top: 10px;">
                      <h4 style="margin: 0; color: #333;">Checklist</h4>
                      <ul style="margin: 5px 0;">
                        ${task.checklist.map((item: any) => `
                          <li style="color: ${item.completed ? '#4CAF50' : '#666'};">
                            ${item.completed ? '✓' : '○'} ${item.title}
                          </li>
                        `).join('')}
                      </ul>
                    </div>
                  ` : ''}
                </div>
              `).join('') || 'No tasks found.'}
            </div>

            <div style="color: #666; font-size: 0.9em; margin-top: 20px;">
              <p>This report was automatically generated by Vibe Project Management.</p>
              <p>To modify your email preferences, please visit your project settings.</p>
            </div>
          </div>
        `;

        // Send email
        await transporter.sendMail({
          from: process.env.EMAIL_USER || 'kevin@solvify.se',
          to: job.settings.recipients,
          subject: `${project.name} - Project Report`,
          html,
        });

        // Calculate next run time (7 days from now)
        const nextRun = new Date();
        nextRun.setDate(nextRun.getDate() + 7);

        // Update job's last_run and next_run times
        await supabase
          .from('cron_jobs')
          .update({
            last_run: new Date().toISOString(),
            next_run: nextRun.toISOString(),
            updated_at: new Date().toISOString()
          })
          .eq('id', job.id);

        return { success: true, jobId: job.id };
      } catch (error) {
        console.error(`Error sending report for job ${job.id}:`, error);
        return { success: false, jobId: job.id, error };
      }
    });

    const results = await Promise.all(sendPromises);
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;

    return NextResponse.json({
      message: `Processed ${results.length} reports`,
      successful,
      failed,
      results
    });
  } catch (error) {
    console.error('Error in cron job:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
} 