'use client';

import { useState, useEffect } from 'react';
import { SidebarDemo } from "@/components/ui/code.demo";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  User, 
  Mail, 
  Phone, 
  Building, 
  MapPin, 
  Globe,
  Camera,
  Loader2,
  Lock,
  Eye,
  EyeOff
} from 'lucide-react';
import { toast } from "sonner";
import { supabaseClient as supabase } from '@/lib/supabase-client';
import { useAuth } from '@/lib/auth-client';

interface UserProfile {
  id?: string;  // Make id optional since it will be generated by Supabase
  user_id: string;
  name: string;
  email: string;
  phone: string;
  company: string;
  role: string;
  address: string;
  city: string;
  country: string;
  website: string;
  avatarUrl?: string;
}

export default function ProfilePage() {
  const { user, isLoading: isAuthLoading } = useAuth();
  const [profile, setProfile] = useState<UserProfile>({
    user_id: '',
    name: '',
    email: '',
    phone: '',
    company: '',
    role: 'User',
    address: '',
    city: '',
    country: '',
    website: ''
  });
  const [isEditing, setIsEditing] = useState(false);
  const [editedProfile, setEditedProfile] = useState<UserProfile>(profile);
  const [isSaving, setIsSaving] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [isSavingAll, setIsSavingAll] = useState(false);

  useEffect(() => {
    if (user?.id) {
      fetchProfile();
    }
  }, [user]);

  const fetchProfile = async () => {
    if (!user?.id) return;

    try {
      // With RLS, we can query the table directly and securely.
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id) // RLS also enforces this, but it's good practice
        .single();

      if (error && error.code !== 'PGRST116') { // Ignore "no rows found" error
        throw error;
      }

      if (data) {
        setProfile(data);
        setEditedProfile(data);
      } else {
        // If no profile exists, create one.
        const { data: newProfile, error: createError } = await supabase
          .from('profiles')
          .insert({
            id: user.id, // Use the auth user id
            user_id: user.id,
            name: user.user_metadata?.name || user.email || '',
            email: user.email || '',
          })
          .select()
          .single();
        
        if (createError) throw createError;
        
        if (newProfile) {
          setProfile(newProfile);
          setEditedProfile(newProfile);
        }
      }
    } catch (error) {
      console.error('Error fetching profile:', error);
      toast.error('Failed to fetch profile');
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setEditedProfile(prev => ({ ...prev, [name]: value }));
  };

  const handleSave = async () => {
    if (!user?.id) return;

    setIsSaving(true);
    try {
      // RLS ensures the user can only update their own profile.
      const { data, error } = await supabase
        .from('profiles')
        .update({
          name: editedProfile.name,
          email: editedProfile.email,
          phone: editedProfile.phone,
          company: editedProfile.company,
          role: editedProfile.role,
          address: editedProfile.address,
          city: editedProfile.city,
          country: editedProfile.country,
          website: editedProfile.website
        })
        .eq('id', user.id)
        .select()
        .single();
      
      if (error) throw error;
      
      if (data) {
        setProfile(data);
        setEditedProfile(data);
        setIsEditing(false);
        toast.success('Profile updated successfully');
      }
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error('Failed to update profile');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    setEditedProfile(profile);
    setIsEditing(false);
  };

  const handleAvatarUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!user?.id) return;

    const file = e.target.files?.[0];
    if (!file) return;

    setIsUploading(true);
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${user.id}-avatar.${fileExt}`;
      const { error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(fileName, file, { upsert: true });

      if (uploadError) throw uploadError;

      const { data: { publicUrl } } = supabase.storage
        .from('avatars')
        .getPublicUrl(fileName);

      // Update the profile with the avatar URL
      const { data: updatedProfile, error: updateError } = await supabase
        .from('profiles')
        .update({ avatar_url: publicUrl })
        .eq('id', user.id)
        .select()
        .single();

      if (updateError) throw updateError;
      
      if (updatedProfile) {
        setProfile(updatedProfile);
        setEditedProfile(updatedProfile);
        toast.success('Avatar uploaded successfully');
      }
    } catch (error) {
      console.error('Error uploading avatar:', error);
      toast.error('Failed to upload avatar');
    } finally {
      setIsUploading(false);
    }
  };

  const handleSaveAll = async () => {
    if (!user?.id) {
      console.error('No user session found for saving all profile data');
      toast.error('User authentication required');
      return;
    }
    
    setIsSavingAll(true);
    try {
      // Use the same save logic as handleSave
      await handleSave();
    } finally {
      setIsSavingAll(false);
    }
  };

  return (
    <SidebarDemo>
      <div className="p-6 space-y-6">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <h1 className="text-2xl font-semibold text-foreground">Profile</h1>
            <p className="text-sm text-muted-foreground">
              Manage your personal information and preferences
            </p>
          </div>
          {!isEditing ? (
            <div className="flex items-center gap-2">
              <Button
                onClick={() => {
                  setIsEditing(true);
                  setEditedProfile(profile);
                }}
                variant="outline"
                className="flex items-center gap-2"
              >
                Edit Profile
              </Button>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <Button
                onClick={() => {
                  handleSave();
                }}
                variant="outline"
                className="flex items-center gap-2"
              >
                Cancel
              </Button>
              <Button
                onClick={() => {
                  handleSave();
                }}
                disabled={isSaving}
                className="flex items-center gap-2"
              >
                {isSaving ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : (
                  'Save Changes'
                )}
              </Button>
              <Button
                onClick={() => {
                  handleSaveAll();
                }}
                disabled={isSavingAll}
                className="flex items-center gap-2 bg-emerald-600 hover:bg-emerald-700"
              >
                {isSavingAll ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Saving All...
                  </>
                ) : (
                  'Save All'
                )}
              </Button>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Avatar Card */}
          <Card className="bg-background border-border dark:border-border p-6 lg:col-span-1">
            <div className="flex flex-col items-center space-y-4">
              <div className="relative">
                <div className="h-32 w-32 rounded-full bg-gray-200 dark:bg-muted flex items-center justify-center overflow-hidden">
                  {profile.avatarUrl ? (
                    // eslint-disable-next-line @next/next/no-img-element
                    <img
                      src={profile.avatarUrl}
                      alt={profile.name}
                      className="h-full w-full object-cover"
                    />
                  ) : (
                    <User className="h-16 w-16 text-foreground0" />
                  )}
                </div>
                {isEditing && (
                  <label
                    htmlFor="avatar-upload"
                    className="absolute bottom-0 right-0 p-2 bg-background rounded-full cursor-pointer hover:bg-gray-200 dark:bg-muted transition-colors"
                  >
                    {isUploading ? (
                      <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
                    ) : (
                      <Camera className="h-4 w-4 text-muted-foreground" />
                    )}
                    <input
                      id="avatar-upload"
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={handleAvatarUpload}
                      disabled={isUploading}
                    />
                  </label>
                )}
              </div>
              <div className="text-center">
                <h2 className="text-xl font-semibold text-foreground">{profile.name}</h2>
                <p className="text-sm text-muted-foreground">{profile.role}</p>
              </div>
            </div>
          </Card>

          {/* Details Card */}
          <Card className="bg-background border-border dark:border-border p-6 lg:col-span-2">
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Personal Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-foreground">Personal Information</h3>
                  
                  <div className="space-y-2">
                    <label className="text-sm text-muted-foreground">Full Name</label>
                    <div className="flex items-center gap-2">
                      <User className="h-4 w-4 text-foreground0" />
                      {isEditing ? (
                        <input
                          type="text"
                          name="name"
                          value={editedProfile.name}
                          onChange={handleInputChange}
                          className="w-full px-3 py-2 bg-background border border-border dark:border-border rounded-md text-foreground"
                        />
                      ) : (
                        <span className="text-foreground">{profile.name}</span>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm text-muted-foreground">Email</label>
                    <div className="flex items-center gap-2">
                      <Mail className="h-4 w-4 text-foreground0" />
                      {isEditing ? (
                        <input
                          type="email"
                          name="email"
                          value={editedProfile.email}
                          onChange={handleInputChange}
                          className="w-full px-3 py-2 bg-background border border-border dark:border-border rounded-md text-foreground"
                        />
                      ) : (
                        <span className="text-foreground">{profile.email}</span>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm text-muted-foreground">Phone</label>
                    <div className="flex items-center gap-2">
                      <Phone className="h-4 w-4 text-foreground0" />
                      {isEditing ? (
                        <input
                          type="tel"
                          name="phone"
                          value={editedProfile.phone}
                          onChange={handleInputChange}
                          className="w-full px-3 py-2 bg-background border border-border dark:border-border rounded-md text-foreground"
                        />
                      ) : (
                        <span className="text-foreground">{profile.phone}</span>
                      )}
                    </div>
                  </div>
                </div>

                {/* Company Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-foreground">Company Information</h3>
                  
                  <div className="space-y-2">
                    <label className="text-sm text-muted-foreground">Company</label>
                    <div className="flex items-center gap-2">
                      <Building className="h-4 w-4 text-foreground0" />
                      {isEditing ? (
                        <input
                          type="text"
                          name="company"
                          value={editedProfile.company}
                          onChange={handleInputChange}
                          className="w-full px-3 py-2 bg-background border border-border dark:border-border rounded-md text-foreground"
                        />
                      ) : (
                        <span className="text-foreground">{profile.company}</span>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm text-muted-foreground">Address</label>
                    <div className="flex items-center gap-2">
                      <MapPin className="h-4 w-4 text-foreground0" />
                      {isEditing ? (
                        <input
                          type="text"
                          name="address"
                          value={editedProfile.address}
                          onChange={handleInputChange}
                          className="w-full px-3 py-2 bg-background border border-border dark:border-border rounded-md text-foreground"
                        />
                      ) : (
                        <span className="text-foreground">{profile.address}</span>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm text-muted-foreground">Website</label>
                    <div className="flex items-center gap-2">
                      <Globe className="h-4 w-4 text-foreground0" />
                      {isEditing ? (
                        <input
                          type="text"
                          name="website"
                          value={editedProfile.website}
                          onChange={handleInputChange}
                          className="w-full px-3 py-2 bg-background border border-border dark:border-border rounded-md text-foreground"
                        />
                      ) : (
                        <span className="text-foreground">{profile.website}</span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </SidebarDemo>
  );
} 