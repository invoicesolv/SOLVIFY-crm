import { useEffect, useState, useCallback } from 'react'
import { Card } from '@/components/ui/card'
import { BarChart, Users, DollarSign, ArrowUpRight, ArrowDownRight, Calendar, Clock, AlertCircle, Settings, X, Eye, EyeOff, Globe, Grid, TrendingUp, Inbox, LineChart, RefreshCw, CheckCircle, Square, CheckSquare, CreditCard } from 'lucide-react'
import { supabase } from '@/lib/supabase'
import { useSession } from 'next-auth/react'
import { useSearchParams, useRouter } from "next/navigation";
import { handleFetchError } from '@/lib/fetch-util'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { useToast } from '@/components/ui/use-toast'
import { cn } from '@/lib/utils'
import { AnimatedBorderCard } from '@/components/ui/animated-border-card'
import { Glow } from "@/components/ui/glow";
import { GlowingEffect } from "@/components/ui/glowing-effect";

interface Invoice {
  document_number: string
  invoice_date: string
  total: number
  balance: number
  due_date: string
  customers: {
    name: string
  }
  currencies: {
    code: string
  }
}

interface Task {
  id: string
  title: string
  deadline: string
  project_id: string
  progress: number
  status: string
  checklist?: Array<{
    id: number;
    text: string;
    done: boolean;
  }>;
}

interface Meeting {
  id: string
  title: string
  start_time: string
  end_time: string
  description: string
}

interface DashboardStats {
  totalRevenue: number
  invoiceCount: number
  averageInvoiceValue: number
  revenueGrowth: number
}

interface Domain {
  id: string
  name: string
  expiry_date: string
  status: string
}

interface Lead {
  id: string
  name: string
  company: string
  email: string
  status: string
  created_at: string
  title?: string
  value?: number
}

interface Sale {
  id: string
  customer_name: string
  amount: number
  status: string
  created_at: string
}

interface EmailThread {
  id: string
  subject: string
  from: string
  date: string
  unread: boolean
}

interface AnalyticsData {
  pageviews: number
  visitors: number
  bounce_rate: number
  avg_session_duration: number
}

interface SearchConsoleData {
  clicks: number
  impressions: number
  ctr: number
  position: number
}

interface CronJob {
  id: string;
  name: string;
  job_type: string;
  schedule: string;
  settings: {
    frequency: string;
    send_day: string;
    send_time: string;
  };
  last_run: string;
  next_run: string;
  status: string;
  execution_status: string;
  error_message?: string;
  property_id?: string;
}

export function Dashboard() {
  const { data: session } = useSession()
  const router = useRouter();
  const { toast } = useToast();
  const [invoices, setInvoices] = useState<Invoice[]>([])
  const [tasks, setTasks] = useState<Task[]>([])
  const [meetings, setMeetings] = useState<Meeting[]>([])
  const [domains, setDomains] = useState<Domain[]>([])
  const [leads, setLeads] = useState<Lead[]>([])
  const [sales, setSales] = useState<Sale[]>([])
  const [emails, setEmails] = useState<EmailThread[]>([])
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null)
  const [searchConsoleData, setSearchConsoleData] = useState<SearchConsoleData | null>(null)
  const [cronJobs, setCronJobs] = useState<CronJob[]>([])
  const [stats, setStats] = useState<DashboardStats>({
    totalRevenue: 0,
    invoiceCount: 0,
    averageInvoiceValue: 0,
    revenueGrowth: 0
  })
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [refreshing, setRefreshing] = useState(false)
  const [debugInfo, setDebugInfo] = useState<{message: string, type: 'error' | 'warning' | 'info'} | null>(null)
  const searchParams = useSearchParams();
  const view = searchParams.get('view');

  // Dashboard customization state
  const [isCustomizing, setIsCustomizing] = useState(false)
  const [visibleWidgets, setVisibleWidgets] = useState({
    revenueStats: true,
    invoiceStats: true,
    averageInvoice: true,
    recentInvoices: true,
    invoiceTypes: true,
    upcomingEvents: true,
    upcomingDeadlines: true,
    urgentTasks: true,
    domains: true,
    leads: true,
    sales: true,
    gmailHub: true,
    analyticsData: true,
    searchConsole: true,
    cronJobs: true,
    invoiceSummary: true,
    salesMetrics: true,
    taskOverview: true,
    recentMeetings: true
  })

  // Function to reload the page
  const reloadPage = () => {
    router.refresh();
  };

  // Save dashboard preferences - completely rewritten
  const saveDashboardPreferences = useCallback(async () => {
      if (!session?.user?.id) {
      console.error('Cannot save preferences: No user ID');
        return;
      }
      
    try {
      console.log('Saving dashboard preferences for user:', session.user.id);
      console.log('Preferences data to save:', visibleWidgets);
      
      let savedSuccessfully = false;
      
      // First check if we can access the user_preferences table
      try {
        const { error: accessError } = await supabase
          .from('user_preferences')
          .select('id')
          .limit(1);
          
        if (accessError) {
          console.error('Cannot access user_preferences table:', accessError);
          throw new Error('Database access issue');
        }
        
        // Stringify settings to ensure consistent format
        const jsonSettings = JSON.stringify(visibleWidgets);
        console.log('Stringified settings:', jsonSettings);
        
        // Try to update existing record first
        const { data: existingPrefs, error: fetchError } = await supabase
          .from('user_preferences')
          .select('id')
          .eq('user_id', session.user.id)
          .maybeSingle();
          
        if (fetchError && fetchError.code !== 'PGRST116') {
          console.error('Error fetching existing preferences:', fetchError);
        } else {
          // Either update or insert based on whether we found an existing record
          if (existingPrefs) {
            console.log('Updating existing preferences with ID:', existingPrefs.id);
            const { error: updateError } = await supabase
              .from('user_preferences')
              .update({
                dashboard_settings: jsonSettings,
                updated_at: new Date().toISOString()
              })
              .eq('id', existingPrefs.id);
              
            if (updateError) {
              console.error('Error updating preferences:', updateError);
            } else {
              savedSuccessfully = true;
            }
          } else {
            console.log('Creating new preference record');
            const { error: insertError } = await supabase
              .from('user_preferences')
              .insert({
                user_id: session.user.id,
                dashboard_settings: jsonSettings,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              });
              
            if (insertError) {
              console.error('Error inserting preferences:', insertError);
            } else {
              savedSuccessfully = true;
            }
          }
        }
      } catch (dbError) {
        console.error('Database error when saving preferences:', dbError);
      }
      
      // Fall back to localStorage if database save failed
      if (!savedSuccessfully) {
        console.log('Falling back to localStorage for preferences');
        try {
          localStorage.setItem('dashboard_preferences', JSON.stringify(visibleWidgets));
          savedSuccessfully = true;
        } catch (storageError) {
          console.error('Failed to save to localStorage:', storageError);
        }
      }
      
      // Show success message if we saved somewhere
      if (savedSuccessfully) {
        toast({
          title: "Dashboard updated",
          description: "Your dashboard settings have been saved.",
          variant: "default"
        });
      } else {
        toast({
          title: "Settings applied",
          description: "Your settings are applied for this session only.",
          variant: "default"
        });
      }
    } catch (error) {
      console.error('Error in saveDashboardPreferences:', error);
      toast({
        title: "Settings applied temporarily",
        description: "Settings could not be saved permanently.",
        variant: "destructive"
      });
    }
  }, [session?.user?.id, visibleWidgets, toast]);

  // Apply changes and exit customization mode
  const applyChanges = async () => {
    try {
      await saveDashboardPreferences();
      setIsCustomizing(false);
    } catch (error) {
      console.error('Error applying changes:', error);
    }
  };

  // Load dashboard preferences
  useEffect(() => {
    const loadDashboardPreferences = async () => {
      if (!session?.user?.id) return;
      
      try {
        console.log('Loading dashboard preferences for user:', session.user.id);
        
        // First try to get preferences from database
        try {
          const { data: prefsData, error: prefsError } = await supabase
            .from('user_preferences')
            .select('dashboard_settings')
            .eq('user_id', session.user.id) // Add this line to properly filter by user_id
            .maybeSingle();
            
          if (prefsError) {
            console.error('Error loading preferences from DB:', prefsError);
          } else if (prefsData?.dashboard_settings) {
            try {
              const settings = typeof prefsData.dashboard_settings === 'string' 
                ? JSON.parse(prefsData.dashboard_settings)
                : prefsData.dashboard_settings;
              
              console.log('Loaded dashboard preferences from DB:', settings);
              setVisibleWidgets(prev => ({ ...prev, ...settings }));
              return; // Exit early since we loaded from DB
            } catch (parseError) {
              console.error('Error parsing dashboard settings from DB:', parseError);
            }
          } else {
            console.log('No dashboard preferences found in DB for user:', session.user.id);
          }
        } catch (dbError) {
          console.error('Failed to access user_preferences table:', dbError);
        }
        
        // If database failed, try localStorage as fallback
        try {
          const localPrefs = localStorage.getItem('dashboard_preferences');
          if (localPrefs) {
            const settings = JSON.parse(localPrefs);
            console.log('Loaded dashboard preferences from localStorage:', settings);
            setVisibleWidgets(prev => ({ ...prev, ...settings }));
          }
        } catch (localStorageError) {
          console.error('Error loading preferences from localStorage:', localStorageError);
        }
      } catch (error) {
        console.error('Error in loadDashboardPreferences:', error);
      }
    };

    // Main function to load data
    const initializeDashboard = async () => {
      setLoading(true);
      setError(null);

      try {
        // Load preferences
        await loadDashboardPreferences();
        
        // Fetch actual dashboard data
        await fetchData();
      } catch (error) {
        console.error('Error initializing dashboard:', error);
        setError('Failed to initialize dashboard. Please reload the page.');
        setLoading(false);
      }
    };
    
    // Initialize dashboard if we have a session
    if (session?.user?.id) {
      initializeDashboard();
    } else {
      setLoading(false);
    }
  }, [session?.user?.id]);

  // Function to refresh all dashboard data - improved version
  const refreshDashboard = async () => {
    if (refreshing) return;
    
    setRefreshing(true);
    try {
      await fetchData();
      toast({
        title: "Dashboard refreshed",
        description: "Your dashboard data has been updated.",
        variant: "default"
      });
    } catch (error) {
      console.error('Error refreshing dashboard:', error);
      toast({
        title: "Refresh failed",
        description: "Could not refresh dashboard data. Please try again.",
        variant: "destructive"
      });
    } finally {
      setRefreshing(false);
        }
  };

  // Use effect for auto-refresh
  useEffect(() => {
    // Set up a refresh interval (every 5 minutes)
    const refreshInterval = setInterval(() => {
      fetchData();
    }, 5 * 60 * 1000);
    
    return () => clearInterval(refreshInterval);
  }, [session?.user?.id]);

  useEffect(() => {
    fetchData();
  }, [session?.user?.id]);

    const fetchData = async () => {
      if (!session?.user?.id) {
        console.error('No user session found');
        setLoading(false);
        setDebugInfo({
          message: 'No user session found. Please log in again.',
          type: 'error'
        });
        return;
      }
      
      try {
        setRefreshing(true);
        console.log('Fetching dashboard data for user:', session.user.id);
        
        // DEBUG SECTION - Test basic Supabase connection
        console.log('DEBUG: Starting fetchData with session:', !!session?.user?.id);
        try {
          const { data: testData, error: testError } = await supabase.from('profiles').select('*').limit(1);
          console.log('DEBUG: Basic query test result:', testData?.length > 0 ? 'SUCCESS' : 'EMPTY', testError ? 'ERROR' : '');
          if (testError) {
            console.error('DEBUG: Basic query test error:', testError);
            setDebugInfo({
              message: `Database connection issue: ${testError.message}`,
              type: 'error'
            });
          }
          
          // Test workspace_id
          const { data: profileData, error: profileError } = await supabase
            .from('profiles')
            .select('workspace_id')
            .eq('user_id', session.user.id)
            .single();
          console.log('DEBUG: Workspace lookup:', profileData?.workspace_id ? profileData.workspace_id : 'NOT FOUND', profileError ? 'ERROR' : '');
          if (profileError) {
            console.error('DEBUG: Workspace lookup error:', profileError);
            setDebugInfo({
              message: `Workspace ID lookup failed: ${profileError.message}`,
              type: 'error'
            });
          } else if (!profileData?.workspace_id) {
            setDebugInfo({
              message: `No workspace found for your user. This may cause data not to load.`,
              type: 'warning'
            });
          }
        } catch (err) {
          console.error('DEBUG: Critical Supabase error:', err);
          setDebugInfo({
            message: `Critical database error: ${err instanceof Error ? err.message : 'Unknown error'}`,
            type: 'error'
          });
        }

        // CALENDAR EVENTS
        try {
          console.log('DEBUG: Attempting to fetch calendar events');
          const { data: calendarEventsData, error: calendarError } = await supabase
            .from('calendar_events')
            .select('*')
            // Don't filter by user_id to see if there are any events at all
            .order('start_time', { ascending: true });

          if (calendarError) {
            console.error('DEBUG: Calendar fetch error:', calendarError);
        } else {
            console.log('DEBUG: Calendar events fetched successfully:', calendarEventsData?.length || 0);
            
            if (calendarEventsData && calendarEventsData.length > 0) {
              const transformedMeetings = calendarEventsData.map(event => ({
                id: event.id,
                title: event.title,
                start_time: event.start_time,
                end_time: event.end_time,
                description: event.description || ''
              }));
              setMeetings(transformedMeetings);
            }
          }
        } catch (err) {
          console.error('Failed to query calendar_events table:', err);
        }
        
        // Try Calendar API as fallback if no events found in database
        if (meetings.length === 0) {
          try {
            console.log('No calendar events found in DB, trying API...');
            const response = await fetch('/api/calendar');
            if (response.ok) {
              const data = await response.json();
              console.log('Calendar API response:', data);
              if (data.items && data.items.length > 0) {
                const transformedMeetings = data.items
                  .filter((event: any) => {
                    const eventDate = new Date(event.start?.dateTime || event.start?.date || new Date().toISOString());
                    return true; // Get all events, don't filter by date
                  })
                  .map((event: any) => ({
                    id: event.id,
                    title: event.title || event.summary || 'Untitled Event',
                    start_time: event.start?.dateTime || event.start?.date || new Date().toISOString(),
                    end_time: event.end?.dateTime || event.end?.date || new Date().toISOString(),
                    description: event.description || ''
                  }))
                  .sort((a: any, b: any) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime());

                console.log('Transformed meetings from API:', transformedMeetings);
                setMeetings(transformedMeetings);
              }
            } else {
              console.log('Calendar API response not OK:', response.status);
            }
          } catch (error) {
            console.error('Error fetching calendar events from API:', error);
          }
        }

        // TASKS - Try different query approaches to get project_tasks data
        try {
          console.log('DEBUG: Attempting to fetch tasks');
          
          // Approach 1: Try without user_id filter to see if there are any tasks at all
          const { data: allTasksData, error: allTasksError } = await supabase
          .from('project_tasks')
          .select(`
            id,
            title,
            deadline,
            project_id,
            progress,
              status,
            projects (
              name
            )
          `)
            .limit(20);

          if (allTasksError) {
            console.error('DEBUG: Tasks fetch error:', allTasksError);
          } else {
            console.log('DEBUG: Tasks fetched successfully:', allTasksData?.length || 0);
            if (allTasksData && allTasksData.length > 0) {
              // If we can get tasks at all, now try with user filter
              setTasks(allTasksData); // Use all tasks as a fallback
              
              // Try to get user-specific tasks
              try {
                const { data: userTasksData } = await supabase
                  .from('project_tasks')
                  .select('*')
                  .eq('user_id', session.user.id);
                  
                if (userTasksData && userTasksData.length > 0) {
                  setTasks(userTasksData);
                }
              } catch (userTasksError) {
                console.error('Error fetching user tasks:', userTasksError);
                // Keep the allTasksData that was already set
              }
            }
          }
        } catch (err) {
          console.error('Failed to query project_tasks table:', err);
        }

        // DOMAIN LOGIC - WITHOUT FORCING USER_ID FILTER
        try {
          console.log('DEBUG: Attempting to fetch domains');
          const { data: domainsData, error: domainsError } = await supabase
            .from('domains')
            .select('*')
            .order('expiry_date', { ascending: true })
            .limit(5);

          if (domainsError) {
            console.error('DEBUG: Domains fetch error:', domainsError);
          } else {
            console.log('DEBUG: Domains fetched successfully:', domainsData?.length || 0, 'domains: ', domainsData);
            
            // Make sure domain data is formatted correctly
            const formattedDomains = domainsData?.map(domain => ({
              id: domain.id,
              name: domain.display_domain || domain.domain || '',
              expiry_date: domain.expiry_date,
              status: domain.status
            })) || [];
            
            setDomains(formattedDomains);
          }
        } catch (err) {
          console.error('Failed to query domains table:', err);
        }

        // LEADS - WITHOUT USER FILTER
        try {
          const { data: leadsData, error: leadsError } = await supabase
            .from('leads')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(5);

          if (leadsError) {
            console.error('Error fetching leads:', leadsError);
          } else {
            console.log('Leads fetched:', leadsData?.length || 0);
            setLeads(leadsData || []);
          }
        } catch (err) {
          console.error('Failed to query leads table:', err);
        }

        // SALES - WITHOUT USER FILTER
        try {
          const { data: salesData, error: salesError } = await supabase
            .from('sales')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(5);

          if (salesError) {
            console.error('Error fetching sales:', salesError);
          } else {
            console.log('Sales fetched:', salesData?.length || 0);
            setSales(salesData || []);
          }
        } catch (err) {
          console.error('Failed to query sales table:', err);
        }

        // INVOICES
        try {
          console.log('DEBUG: Attempting to fetch invoices');
        const { data: invoicesData, error: invoicesError } = await supabase
          .from('invoices')
          .select(`
              id,
              document_number,
              invoice_date,
              due_date,
              total,
              balance,
            customers (
              name
            ),
            currencies (
              code
            )
          `)
            .order('invoice_date', { ascending: false });

          if (invoicesError) {
            console.error('DEBUG: Invoices fetch error:', invoicesError);
          } else {
            console.log('DEBUG: Invoices fetched successfully:', invoicesData?.length || 0);
            if (invoicesData && invoicesData.length > 0) {
              console.log('DEBUG: First invoice sample:', invoicesData[0]);
              setInvoices(invoicesData || []);
              
              // Calculate dashboard statistics immediately after setting invoices
              try {
                calculateStats(invoicesData || []);
              } catch (statsError) {
                console.error('Error calculating stats:', statsError);
              }
        } else {
              console.warn('No invoices found in database');
              setInvoices([]);
          setStats({
            totalRevenue: 0,
            invoiceCount: 0,
            averageInvoiceValue: 0,
            revenueGrowth: 0
              });
            }
          }
        } catch (err) {
          console.error('Failed to query invoices table:', err);
        }

        // Try API endpoints - each in their own try/catch to prevent cascading failures
        
        // EMAILS - Gmail integration
        try {
          console.log('DEBUG: Attempting to fetch emails');
          // Use the correct endpoint /api/gmail/fetch
          const response = await fetch('/api/gmail/fetch', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          if (response.ok) {
            const data = await response.json();
            console.log('Gmail API response:', data);
            if (data.emails && data.emails.length > 0) {
              const formattedEmails = data.emails.map((email: any) => ({
                id: email.id,
                subject: email.subject || 'No Subject',
                from: email.from || 'Unknown Sender',
                date: email.date || new Date().toISOString(),
                unread: email.unread || false
              }));
              console.log('Formatted emails from Gmail:', formattedEmails);
              // Limit to 5 emails for display
              setEmails(formattedEmails.slice(0, 5));
            } else {
              console.log('No emails returned from Gmail API');
              setEmails([]);
            }
          } else {
            console.error('Failed to fetch emails from Gmail API:', response.status);
            setEmails([]);
          }
        } catch (error) {
          console.error('Error fetching emails:', error);
          setEmails([]);
        }
        
        // CRON JOBS - WITHOUT USER FILTER
        try {
          const { data: cronJobsData, error: cronJobsError } = await supabase
            .from('cron_jobs')
            .select('*')
            .order('updated_at', { ascending: false })
            .limit(5);

          if (cronJobsError) {
            console.error('Error fetching cron jobs:', cronJobsError);
          } else {
            // Map data to include proper defaults
            const formattedJobs = (cronJobsData || []).map(job => ({
              ...job,
              name: job.name || job.job_type || 'Unknown Task',
              schedule: job.settings?.frequency ? 
                `${job.settings.frequency} (${job.settings.send_day || 'Any day'} at ${job.settings.send_time || 'Any time'})` : 
                'Not scheduled',
              status: job.status || 'pending',
              execution_status: job.execution_status || (job.last_run ? 'success' : 'pending')
            }));
            setCronJobs(formattedJobs);
          }
        } catch (err) {
          console.error('Failed to query cron_jobs table:', err);
        }
        
        // Analytics data
        try {
          console.log('DEBUG: Attempting to fetch analytics data');
          // Fix the method and path for analytics
          const response = await fetch('/api/analytics/overview', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          if (response.ok) {
            const data = await response.json();
            console.log('Analytics response:', data);
            if (data.analytics) {
              setAnalyticsData(data.analytics);
            }
          } else {
            console.error('Failed to fetch analytics data:', response.status);
          }
      } catch (error) {
          console.error('Error fetching analytics data:', error);
        }

        // Search Console data
        try {
          console.log('DEBUG: Attempting to fetch search console data');
          // Fix the method and path for search console
          const response = await fetch('/api/search-console/overview', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          if (response.ok) {
            const data = await response.json();
            console.log('Search Console response:', data);
            if (data.searchConsole) {
              setSearchConsoleData(data.searchConsole);
            }
          } else {
            console.error('Failed to fetch search console data:', response.status);
          }
        } catch (error) {
          console.error('Error fetching search console data:', error);
        }

        // Top websites
        try {
          console.log('DEBUG: Attempting to fetch top websites');
          // Fix the path for top websites
          const response = await fetch('/api/analytics/websites', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          if (response.ok) {
            const data = await response.json();
            console.log('Top websites response:', data);
            if (data.websites && data.websites.length > 0) {
              setTopWebsites(data.websites.slice(0, 3)); // Top 3 websites
            }
          } else {
            console.error('Failed to fetch top websites:', response.status);
          }
        } catch (error) {
          console.error('Error fetching top websites:', error);
        }

        // Top search terms
        try {
          console.log('DEBUG: Attempting to fetch top search terms');
          // Fix the path for top search terms
          const response = await fetch('/api/search-console/terms', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          if (response.ok) {
            const data = await response.json();
            console.log('Top search terms response:', data);
            if (data.terms && data.terms.length > 0) {
              setTopSearchTerms(data.terms.slice(0, 3)); // Top 3 search terms
            }
          } else {
            console.error('Failed to fetch top search terms:', response.status);
          }
        } catch (error) {
          console.error('Error fetching top search terms:', error);
        }

      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setLoading(false);
        setRefreshing(false);
      }
    };

  const calculateStats = (invoices: Invoice[]) => {
    console.log('Calculating stats from invoices, count:', invoices.length);
    
    // Validate each invoice has the required data
    const validInvoices = invoices.filter(inv => {
      if (inv.total === undefined || inv.total === null) {
        console.warn('Invoice missing total:', inv.document_number);
        return false;
      }
      return true;
    });
    
    console.log('Valid invoices for calculation:', validInvoices.length);
    
    // Calculate total revenue
    const total = validInvoices.reduce((sum, inv) => {
      // Handle both string and number formats
      const amount = typeof inv.total === 'string' ? parseFloat(inv.total) : inv.total;
      // Only add if it's a valid number
      const validAmount = !isNaN(amount) ? amount : 0;
      return sum + validAmount;
    }, 0);
    
    const count = validInvoices.length;
    const average = count > 0 ? total / count : 0;

    // Calculate growth by comparing last month to previous month
    const now = new Date();
    const lastMonthInvoices = validInvoices.filter(inv => {
      if (!inv.invoice_date) return false;
      const date = new Date(inv.invoice_date);
      return date.getMonth() === now.getMonth() - 1 && date.getFullYear() === now.getFullYear();
    });
    
    const previousMonthInvoices = validInvoices.filter(inv => {
      if (!inv.invoice_date) return false;
      const date = new Date(inv.invoice_date);
      return date.getMonth() === now.getMonth() - 2 && date.getFullYear() === now.getFullYear();
    });

    console.log('Last month invoices:', lastMonthInvoices.length);
    console.log('Previous month invoices:', previousMonthInvoices.length);

    const lastMonthTotal = lastMonthInvoices.reduce((sum, inv) => {
      const amount = typeof inv.total === 'string' ? parseFloat(inv.total) : inv.total;
      return sum + (!isNaN(amount) ? amount : 0);
    }, 0);
    
    const previousMonthTotal = previousMonthInvoices.reduce((sum, inv) => {
      const amount = typeof inv.total === 'string' ? parseFloat(inv.total) : inv.total;
      return sum + (!isNaN(amount) ? amount : 0);
    }, 0);

    const growth = previousMonthTotal > 0 
      ? ((lastMonthTotal - previousMonthTotal) / previousMonthTotal) * 100 
      : 0;

    console.log('Calculated invoice stats:', {
      totalRevenue: total,
      invoiceCount: count,
      averageInvoiceValue: average,
      revenueGrowth: growth,
      lastMonthTotal,
      previousMonthTotal
    });

    setStats({
      totalRevenue: total,
      invoiceCount: count,
      averageInvoiceValue: average,
      revenueGrowth: growth
    });
  }

  const getGreeting = () => {
    const hour = new Date().getHours()
    const name = session?.user?.name || 'there' // Use session user's name or fallback to 'there'
    
    if (hour < 12) return `Good morning, ${name}`
    if (hour < 17) return `Good afternoon, ${name}`
    return `Good evening, ${name}`
  }

  const getUpcomingDeadlines = () => {
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    
    return tasks
      .filter(task => {
        if (!task.deadline) return false;
        const deadline = new Date(task.deadline)
        deadline.setHours(0, 0, 0, 0)
        // Only include future deadlines that aren't urgent (already shown in urgent tasks)
        return deadline > today && task.progress < 100
      })
      .sort((a, b) => {
        if (!a.deadline) return 1;
        if (!b.deadline) return -1;
        return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
      })
      .slice(0, 5)
  }

  const getUrgentTasks = () => {
    const today = new Date();
    today.setHours(23, 59, 59, 999);
    
    return tasks
      .filter(task => {
        if (!task.deadline) return false;
        const deadline = new Date(task.deadline);
        // Consider tasks urgent if deadline is today or in the past, or if status is explicitly set to urgent
        return (deadline <= today && task.progress < 100) || task.status === 'urgent';
      })
      .sort((a, b) => {
        // If no deadline, put at the end
        if (!a.deadline) return 1;
        if (!b.deadline) return -1;
        // Sort by deadline (oldest first)
        return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
      });
  }

  const handleTaskComplete = async (taskId: string) => {
    if (!session?.user?.id) {
      console.log('No user session found, cannot complete task');
      toast({
        title: "Authentication required",
        description: "Please log in to complete tasks",
        variant: "destructive",
      });
      return;
    }
    
    try {
      // Find the task in our local state
      const task = tasks.find(t => t.id === taskId);
      if (!task) {
        console.log('Task not found:', taskId);
        return;
      }
      
      console.log('Completing task:', task);
      
      // If the task doesn't have any checklist items, let's mark it as complete
      if (!task.checklist || task.checklist.length === 0) {
        console.log('Task has no checklist, marking as complete');
        // Update progress to 100%
        const { error } = await supabase
          .from('project_tasks')
          .update({ progress: 100 })
          .eq('id', taskId);
        
        if (error) {
          console.error('Supabase update error:', error);
          throw error;
        }
        
        // Update local state
        setTasks(prev => prev.map(t => 
          t.id === taskId ? { ...t, progress: 100 } : t
        ));
        
        // Show success message
        toast({
          title: "Task completed",
          description: "The task has been marked as complete",
        });
        
        // Trigger a dashboard refresh to update display
        refreshDashboard();
        return;
      }
      
      // If the task has checklist items, mark them all as complete
      console.log('Task has checklist, marking all items as complete');
      const updatedChecklist = task.checklist.map(item => ({
        ...item,
        done: true
      }));
      
      // Update in Supabase
      const { error } = await supabase
        .from('project_tasks')
        .update({ 
          checklist: updatedChecklist,
          progress: 100 
        })
        .eq('id', taskId);
      
      if (error) {
        console.error('Supabase update error:', error);
        throw error;
      }
      
      // Update local state
      setTasks(prev => prev.map(t => 
        t.id === taskId ? { 
          ...t, 
          checklist: updatedChecklist,
          progress: 100 
        } : t
      ));
      
      // Show success message
      toast({
        title: "Task completed",
        description: "All checklist items have been marked as complete",
      });
      
      // Trigger a dashboard refresh to update display
      refreshDashboard();
    } catch (error) {
      console.error('Error completing task:', error);
      toast({
        title: "Error",
        description: "Failed to complete task",
        variant: "destructive",
      });
    }
  };

  // Add function to calculate total pipeline sales
  const calculateTotalPipeline = (salesData: Sale[]) => {
    return salesData.reduce((total, sale) => {
      // Only include pending or in progress sales in pipeline
      if (sale.status === 'pending' || sale.status === 'in progress') {
        return total + (sale.amount || 0);
      }
      return total;
    }, 0);
  };

  // Create state variables for top websites
  const [topWebsites, setTopWebsites] = useState<{url: string, pageviews: number}[]>([]);
  const [topSearchTerms, setTopSearchTerms] = useState<{term: string, clicks: number}[]>([]);

  if (view === 'agenda') {
    return <div className="text-neutral-400">Agenda view removed.</div>;
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-neutral-400"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6 p-6">
      {/* Debug alert removed as everything is working correctly */}
    
      <div className="flex justify-between items-center mb-2">
        <div className="group relative flex-1 mr-4 overflow-hidden rounded-lg">
          {/* Border animation that's always visible */}
          <div className="absolute inset-0 z-0 bg-gradient-to-r from-purple-500 via-pink-500 to-purple-500 bg-[length:200%_200%] animate-gradient rounded-lg opacity-60"></div>
          
          {/* Content with a small margin to show the border */}
          <div className="relative z-10 m-[2px] bg-neutral-800 p-6 rounded-lg shadow-lg">
        <h2 className="text-2xl font-bold text-white">{getGreeting()}</h2>
        <p className="text-neutral-400 mt-2">Here's what's happening today</p>
          </div>
        </div>

        <div className="flex space-x-3">
          <div className="group relative overflow-hidden rounded-lg">
            <div className="absolute inset-0 z-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-gradient-to-r from-blue-500 via-purple-500 to-blue-500 bg-[length:200%_200%] animate-gradient rounded-lg"></div>
            
            <div className="relative z-10 m-[1px] bg-neutral-800 rounded-lg hover:bg-neutral-750 transition-colors duration-300">
              <Button 
                variant="ghost" 
                className="border-0 bg-transparent text-neutral-200 hover:bg-transparent hover:text-white"
                onClick={refreshDashboard}
                disabled={refreshing}
              >
                <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />
                {refreshing ? 'Refreshing...' : 'Refresh'}
              </Button>
            </div>
          </div>
          
          <div className="group relative overflow-hidden rounded-lg">
            <div className="absolute inset-0 z-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-gradient-to-r from-green-500 via-blue-500 to-green-500 bg-[length:200%_200%] animate-gradient rounded-lg"></div>
            
            <div className="relative z-10 m-[1px] bg-neutral-800 rounded-lg hover:bg-neutral-750 transition-colors duration-300">
              <Button 
                variant="ghost" 
                className="border-0 bg-transparent text-neutral-200 hover:bg-transparent hover:text-white"
                onClick={() => setIsCustomizing(!isCustomizing)}
              >
                {isCustomizing ? <X className="h-4 w-4 mr-2" /> : <Settings className="h-4 w-4 mr-2" />}
                {isCustomizing ? 'Cancel' : 'Customize Dashboard'}
              </Button>
            </div>
          </div>
        </div>
      </div>
      
      {isCustomizing && (
        <Card className="p-6 bg-neutral-800 border-neutral-700 shadow-lg">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-white">Customize Your Dashboard</h3>
            <div className="flex space-x-2">
              <Button 
                variant="outline" 
                size="sm"
                className="bg-neutral-700 border-neutral-600 text-neutral-200 hover:bg-neutral-600"
                onClick={() => setIsCustomizing(false)}
              >
                Cancel
              </Button>
              
              <Button 
                variant="default" 
                size="sm"
                className="bg-blue-600 hover:bg-blue-700 text-white"
                onClick={applyChanges}
              >
                Save Changes
              </Button>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.revenueStats ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.revenueStats ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, revenueStats: !prev.revenueStats }))}
              >
                {visibleWidgets.revenueStats ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Revenue Stats</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.invoiceStats ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.invoiceStats ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, invoiceStats: !prev.invoiceStats }))}
              >
                {visibleWidgets.invoiceStats ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Invoice Count</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.averageInvoice ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.averageInvoice ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, averageInvoice: !prev.averageInvoice }))}
              >
                {visibleWidgets.averageInvoice ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Average Invoice</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.recentInvoices ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.recentInvoices ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, recentInvoices: !prev.recentInvoices }))}
              >
                {visibleWidgets.recentInvoices ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Recent Invoices</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.invoiceTypes ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.invoiceTypes ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, invoiceTypes: !prev.invoiceTypes }))}
              >
                {visibleWidgets.invoiceTypes ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Invoice Types</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.upcomingEvents ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.upcomingEvents ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, upcomingEvents: !prev.upcomingEvents }))}
              >
                {visibleWidgets.upcomingEvents ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Upcoming Events</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.upcomingDeadlines ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.upcomingDeadlines ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, upcomingDeadlines: !prev.upcomingDeadlines }))}
              >
                {visibleWidgets.upcomingDeadlines ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Upcoming Deadlines</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.urgentTasks ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.urgentTasks ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, urgentTasks: !prev.urgentTasks }))}
              >
                {visibleWidgets.urgentTasks ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Urgent Tasks</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.domains ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.domains ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, domains: !prev.domains }))}
              >
                {visibleWidgets.domains ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Domains</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.leads ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.leads ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, leads: !prev.leads }))}
              >
                {visibleWidgets.leads ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Leads</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.sales ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.sales ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, sales: !prev.sales }))}
              >
                {visibleWidgets.sales ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Sales</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.gmailHub ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.gmailHub ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, gmailHub: !prev.gmailHub }))}
              >
                {visibleWidgets.gmailHub ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Gmail Hub</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.analyticsData ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.analyticsData ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, analyticsData: !prev.analyticsData }))}
              >
                {visibleWidgets.analyticsData ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Analytics</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.searchConsole ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.searchConsole ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, searchConsole: !prev.searchConsole }))}
              >
                {visibleWidgets.searchConsole ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Search Console</span>
            </div>
            
            <div className="flex items-center space-x-2 p-2 border border-neutral-700 rounded-md bg-neutral-850">
              <Button 
                variant={visibleWidgets.cronJobs ? "default" : "outline"}
                size="sm"
                className={`${visibleWidgets.cronJobs ? 'bg-green-600 hover:bg-green-700' : 'bg-neutral-700'} w-8 h-8 p-0`}
                onClick={() => setVisibleWidgets(prev => ({ ...prev, cronJobs: !prev.cronJobs }))}
              >
                {visibleWidgets.cronJobs ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
              <span className="text-sm text-neutral-300">Scheduled Tasks</span>
            </div>
          </div>
        </Card>
      )}

      {visibleWidgets.revenueStats || visibleWidgets.invoiceStats || visibleWidgets.averageInvoice ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
          {visibleWidgets.revenueStats && (
            <Link href="/invoices" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View Details →
              </span>
              <AnimatedBorderCard className="p-6 bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[180px]" gradient="blue-purple">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-neutral-400">Total Revenue</p>
              <h3 className="text-2xl font-bold mt-2 text-white">
                {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: 'SEK' })
                  .format(stats.totalRevenue)}
              </h3>
              <div className="mt-4 flex items-center gap-2">
                <div className={`flex items-center gap-1 ${stats.revenueGrowth >= 0 ? 'text-emerald-400' : 'text-red-400'}`}>
                  {stats.revenueGrowth >= 0 ? <ArrowUpRight className="w-4 h-4" /> : <ArrowDownRight className="w-4 h-4" />}
                  <span>{Math.abs(stats.revenueGrowth).toFixed(1)}%</span>
                </div>
                <p className="text-sm text-neutral-400">vs last month</p>
              </div>
            </div>
            <div className="p-3 bg-emerald-500/10 rounded-full">
              <DollarSign className="w-6 h-6 text-emerald-400" />
            </div>
          </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.invoiceStats && (
            <Link href="/invoices" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View Details →
              </span>
              <AnimatedBorderCard className="p-6 bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[180px]" gradient="green-blue">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-neutral-400">Total Invoices</p>
              <h3 className="text-2xl font-bold mt-2 text-white">{stats.invoiceCount}</h3>
            </div>
            <div className="p-3 bg-blue-500/10 rounded-full">
              <Users className="w-6 h-6 text-blue-400" />
            </div>
          </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.averageInvoice && (
            <Link href="/invoices" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View Details →
              </span>
              <AnimatedBorderCard className="p-6 bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[180px]" gradient="purple-pink">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-neutral-400">Average Invoice</p>
              <h3 className="text-2xl font-bold mt-2 text-white">
                {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: 'SEK' })
                  .format(stats.averageInvoiceValue)}
              </h3>
            </div>
            <div className="p-3 bg-purple-500/10 rounded-full">
              <BarChart className="w-6 h-6 text-purple-400" />
            </div>
          </div>
              </AnimatedBorderCard>
            </Link>
          )}
      </div>
      ) : null}

      {visibleWidgets.recentInvoices || visibleWidgets.invoiceTypes ? (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          {visibleWidgets.recentInvoices && (
            <Link href="/invoices" className="block lg:col-span-2 relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View All Invoices →
              </span>
              <AnimatedBorderCard className="lg:col-span-2 bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="blue-purple">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-white">Recent Invoices</h3>
            </div>
            <div className="mt-6">
              <table className="w-full">
                <thead>
                  <tr>
                    <th className="text-left text-sm font-medium text-neutral-400 pb-4">Customer</th>
                    <th className="text-left text-sm font-medium text-neutral-400 pb-4">Date</th>
                    <th className="text-right text-sm font-medium text-neutral-400 pb-4">Amount</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-neutral-700">
                  {invoices.slice(0, 5).map((invoice) => (
                    <tr key={invoice.document_number}>
                            <td className="py-4 text-sm text-white">
                              <div className="truncate max-w-[180px]" title={invoice.customers?.name}>
                                {invoice.customers?.name}
                              </div>
                            </td>
                      <td className="py-4 text-sm text-neutral-400">
                        {new Date(invoice.invoice_date).toLocaleDateString('sv-SE')}
                      </td>
                      <td className="py-4 text-sm text-right font-medium text-white">
                        {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: invoice.currencies?.code || 'SEK' })
                          .format(invoice.total)}
                      </td>
                    </tr>
                  ))}
                        {invoices.length === 0 && (
                          <tr>
                            <td colSpan={3} className="py-4 text-sm text-center text-neutral-400">No invoices found</td>
                          </tr>
                        )}
                </tbody>
              </table>
            </div>
          </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.invoiceTypes && (
            <Link href="/invoices" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View Details →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="green-blue">
          <div className="p-6">
            <h3 className="text-lg font-semibold text-white">Invoice Types</h3>
            <div className="mt-6 space-y-4">
              {Object.entries(
                invoices.reduce((acc, inv) => {
                  const type = inv.balance === 0 ? 'Paid' : inv.balance === inv.total ? 'Unpaid' : 'Partial'
                  acc[type] = (acc[type] || 0) + 1
                  return acc
                }, {} as Record<string, number>)
              ).map(([type, count]) => (
                <div key={type} className="flex items-center justify-between">
                  <span className="text-sm text-neutral-400">{type}</span>
                  <span className="text-sm font-medium text-white">{count}</span>
                </div>
              ))}
                    {invoices.length === 0 && (
                      <div className="text-sm text-center text-neutral-400">No invoice data</div>
                    )}
            </div>
          </div>
              </AnimatedBorderCard>
            </Link>
          )}
      </div>
      ) : null}

      {visibleWidgets.upcomingEvents || visibleWidgets.upcomingDeadlines || visibleWidgets.urgentTasks ? (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          {visibleWidgets.upcomingEvents && (
            <Link href="/calendar" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                Go to Calendar →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="blue-purple">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-white">Upcoming Events</h3>
              <Calendar className="w-5 h-5 text-neutral-400" />
            </div>
            <div className="space-y-4">
                    {meetings && meetings.length > 0 ? (
                      meetings.slice(0, 5).map(meeting => (
                <div key={meeting.id} className="flex items-start space-x-4">
                  <div className="p-2 bg-blue-500/10 rounded-full">
                    <Clock className="w-4 h-4 text-blue-400" />
                  </div>
                          <div className="flex-1 overflow-hidden">
                            <p className="text-sm font-medium text-white truncate" title={meeting.title}>{meeting.title}</p>
                            <p className="text-xs text-neutral-400 truncate" title={`${new Date(meeting.start_time).toLocaleDateString()} at ${new Date(meeting.start_time).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true })}`}>
                              {new Date(meeting.start_time).toLocaleDateString()} at {' '}
                              {new Date(meeting.start_time).toLocaleTimeString('en-US', { 
                                hour: '2-digit', 
                                minute: '2-digit',
                                hour12: true
                              })}
                    </p>
                  </div>
                </div>
                      ))
                    ) : (
                      <div className="flex flex-col items-center justify-center py-4">
                        <p className="text-sm text-neutral-400 mb-2">No upcoming events</p>
                        <Button 
                          variant="outline"
                          size="sm"
                          className="text-xs bg-neutral-700 hover:bg-neutral-600"
                          asChild
                        >
                          <Link href="/calendar">Add Event</Link>
                        </Button>
                      </div>
              )}
            </div>
          </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.upcomingDeadlines && (
            <Link href="/projects" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View All Deadlines →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="green-blue">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-white">Upcoming Deadlines</h3>
              <Clock className="w-5 h-5 text-neutral-400" />
            </div>
            <div className="space-y-4">
                    {getUpcomingDeadlines().length > 0 ? (
                      getUpcomingDeadlines().map(task => (
                <div key={task.id} className="flex items-start space-x-4">
                  <div className="p-2 bg-yellow-500/10 rounded-full">
                    <Clock className="w-4 h-4 text-yellow-400" />
                  </div>
                          <div className="flex-1 overflow-hidden">
                            <p className="text-sm font-medium text-white truncate" title={task.title}>{task.title}</p>
                            <div className="flex justify-between items-center mt-1">
                              <p className="text-xs text-yellow-400">
                                Due: {new Date(task.deadline as string).toLocaleDateString()}
                              </p>
                              <div className="bg-neutral-700 h-2 w-24 rounded-full overflow-hidden">
                                <div 
                                  className="bg-green-500 h-full" 
                                  style={{ width: `${task.progress}%` }} 
                                />
                  </div>
                </div>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="flex flex-col items-center justify-center py-4">
                        <p className="text-sm text-neutral-400 mb-2">No upcoming deadlines</p>
                        <Button 
                          variant="outline"
                          size="sm"
                          className="text-xs bg-neutral-700 hover:bg-neutral-600"
                          asChild
                        >
                          <Link href="/projects">View Projects</Link>
                        </Button>
                      </div>
              )}
            </div>
          </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.urgentTasks && (
            <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="orange-red">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-white">Urgent Tasks</h3>
              <AlertCircle className="w-5 h-5 text-red-400" />
            </div>
            <div className="space-y-4">
                  {getUrgentTasks().length > 0 ? (
                    getUrgentTasks().slice(0, 5).map(task => (
                <div key={task.id} className="flex items-start space-x-4">
                        <button
                          onClick={() => handleTaskComplete(task.id)}
                          className={cn(
                            "p-2 rounded-full transition-colors",
                            task.progress >= 100 
                              ? "bg-green-500/20 text-green-400" 
                              : "bg-red-500/10 hover:bg-red-500/20 text-red-400 hover:text-red-300"
                          )}
                        >
                          {task.progress >= 100 ? (
                            <CheckCircle className="w-4 h-4" />
                          ) : (
                            <AlertCircle className="w-4 h-4" />
                          )}
                        </button>
                        <div className="flex-1 overflow-hidden">
                          <p className="text-sm font-medium text-white truncate" title={task.title}>{task.title}</p>
                          <div className="flex justify-between items-center mt-1">
                            {task.deadline ? (
                              <p className="text-xs text-red-400">
                                Due: {new Date(task.deadline).toLocaleDateString()}
                              </p>
                            ) : (
                              <p className="text-xs text-red-400">Urgent</p>
                            )}
                            <div className="bg-neutral-700 h-2 w-24 rounded-full overflow-hidden">
                              <div 
                                className="bg-green-500 h-full" 
                                style={{ width: `${task.progress}%` }} 
                              />
                  </div>
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="flex flex-col items-center justify-center py-4">
                      <p className="text-sm text-neutral-400 mb-2">No urgent tasks</p>
                      <Button 
                        variant="outline"
                        size="sm"
                        className="text-xs bg-neutral-700 hover:bg-neutral-600"
                        asChild
                      >
                        <Link href="/projects">View Projects</Link>
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            </AnimatedBorderCard>
          )}
      </div>
      ) : null}

      {/* Domains, Leads and Sales section */}
      {visibleWidgets.domains || visibleWidgets.leads || visibleWidgets.sales ? (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          {visibleWidgets.domains && (
            <Link href="/domains" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View All Domains →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="blue-purple">
                <div className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-semibold text-white">Domain Expiry</h3>
                    <Globe className="w-5 h-5 text-neutral-400" />
                  </div>
                  <div className="space-y-4">
                    {domains.map(domain => (
                      <div key={domain.id} className="flex items-start space-x-4">
                        <div className="p-2 bg-blue-500/10 rounded-full">
                          <Globe className="w-4 h-4 text-blue-400" />
                        </div>
                        <div className="flex-1 overflow-hidden">
                          <p className="text-sm font-medium text-white truncate" title={domain.name}>{domain.name}</p>
                          <p className="text-xs text-neutral-400">
                            Expires: {new Date(domain.expiry_date).toLocaleDateString('sv-SE')}
                          </p>
                  </div>
                </div>
              ))}
                    {domains.length === 0 && (
                      <p className="text-sm text-neutral-400">No domains found</p>
              )}
            </div>
          </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.leads && (
            <Link href="/leads" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View All Leads →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="green-blue">
                <div className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-semibold text-white">Recent Leads</h3>
                    <Grid className="w-5 h-5 text-neutral-400" />
      </div>
                  <div className="space-y-4">
                    {leads.map(lead => {
                      // Check if lead is less than 2 days old
                      const isRecent = lead.created_at && 
                        (new Date().getTime() - new Date(lead.created_at).getTime()) < (2 * 24 * 60 * 60 * 1000);
                      
                      return (
                        <div key={lead.id} className="flex items-start space-x-4">
                          <div className={`p-2 ${isRecent ? 'bg-green-600/20' : 'bg-green-500/10'} rounded-full`}>
                            <Grid className={`w-4 h-4 ${isRecent ? 'text-green-500' : 'text-green-400'}`} />
    </div>
                          <div className="flex-1 overflow-hidden">
                            <div className="flex items-center">
                              <p className="text-sm font-medium text-white truncate" title={lead.name}>{lead.name}</p>
                              {isRecent && (
                                <span className="ml-2 px-1.5 py-0.5 text-xs bg-green-600/20 text-green-400 rounded-full">
                                  New
                                </span>
                              )}
                            </div>
                            <p className="text-xs text-neutral-400 truncate" title={`${lead.title ? `${lead.title} at ` : ""}${lead.company} - ${lead.status}`}>
                              {lead.title ? `${lead.title} at ` : ""}{lead.company} - {lead.status}
                            </p>
                            {lead.value !== undefined && lead.value > 0 && (
                              <p className="text-xs text-green-400 mt-1">
                                Est. value: {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: 'SEK' }).format(Number(lead.value))}
                              </p>
                            )}
                          </div>
                        </div>
                      );
                    })}
                    {leads.length === 0 && (
                      <p className="text-sm text-neutral-400">No leads found</p>
                    )}
                  </div>
                </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.sales && (
            <Link href="/sales" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View All Sales →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="purple-pink">
                <div className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-semibold text-white">Recent Sales</h3>
                    <TrendingUp className="w-5 h-5 text-neutral-400" />
                  </div>
                  
                  {sales.length > 0 && (
                    <div className="mb-4 p-3 bg-neutral-700/20 rounded-md">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-neutral-300">Pipeline Total:</span>
                        <span className="text-sm font-medium text-green-400">
                          {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: 'SEK' }).format(calculateTotalPipeline(sales))}
                        </span>
                      </div>
                    </div>
                  )}
                  
                  <div className="space-y-4">
                    {sales.map(sale => (
                      <div key={sale.id} className="flex items-start space-x-4">
                        <div className="p-2 bg-purple-500/10 rounded-full">
                          <TrendingUp className={`w-4 h-4 ${sale.status === 'completed' ? 'text-green-400' : 'text-purple-400'}`} />
                        </div>
                        <div className="flex-1 overflow-hidden">
                          <p className="text-sm font-medium text-white truncate" title={sale.customer_name}>{sale.customer_name}</p>
                          <p className="text-xs text-neutral-400">
                            {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: 'SEK' }).format(sale.amount)}
                          </p>
                          <p className="text-xs text-neutral-400">
                            <span className={`${
                              sale.status === 'completed' ? 'text-green-400' : 
                              sale.status === 'pending' ? 'text-yellow-400' : 
                              'text-blue-400'
                            }`}>
                              {sale.status.charAt(0).toUpperCase() + sale.status.slice(1)}
                            </span> - {new Date(sale.created_at).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                    ))}
                    {sales.length === 0 && (
                      <p className="text-sm text-neutral-400">No sales found</p>
                    )}
                  </div>
                </div>
              </AnimatedBorderCard>
            </Link>
          )}
        </div>
      ) : null}

      {visibleWidgets.invoiceSummary || visibleWidgets.salesMetrics ? (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {visibleWidgets.invoiceSummary && (
            <Link href="/finances" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                Open Finance Dashboard →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl" gradient="blue-purple">
                <div className="p-6 relative overflow-hidden">
                  <Glow variant="top" className="opacity-30 group-hover:opacity-60 transition-opacity duration-700" />
                  <div className="relative z-10">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold text-white">Invoice Summary</h3>
                      <CreditCard className="w-5 h-5 text-neutral-400" />
                    </div>
                    {invoices.length > 0 ? (
                      <div className="space-y-4">
                        <div className="grid grid-cols-2 gap-4">
                          <div className="bg-neutral-700/20 rounded-lg p-3">
                            <p className="text-xs text-neutral-400 mb-1">Outstanding</p>
                            <p className="text-lg font-semibold text-white">
                              {
                                new Intl.NumberFormat('sv-SE', { 
                                  style: 'currency', 
                                  currency: 'SEK'
                                }).format(
                                  invoices.reduce((total, invoice) => total + invoice.balance, 0)
                                )
                              }
                            </p>
                          </div>
                          <div className="bg-neutral-700/20 rounded-lg p-3">
                            <p className="text-xs text-neutral-400 mb-1">Total Invoiced</p>
                            <p className="text-lg font-semibold text-white">
                              {
                                new Intl.NumberFormat('sv-SE', { 
                                  style: 'currency', 
                                  currency: 'SEK'
                                }).format(
                                  invoices.reduce((total, invoice) => total + invoice.total, 0)
                                )
                              }
                            </p>
                          </div>
                        </div>
                        
                        <h4 className="text-sm font-medium text-white pt-2">Recent Invoices</h4>
                        <div className="space-y-2">
                          {invoices.slice(0, 3).map(invoice => (
                            <div key={invoice.document_number} className="flex justify-between items-center p-2 rounded-lg hover:bg-neutral-700/20">
                  <div>
                                <p className="text-sm font-medium text-white">{invoice.customers.name}</p>
                                <p className="text-xs text-neutral-400">
                                  #{invoice.document_number} · {new Date(invoice.invoice_date).toLocaleDateString()}
                                </p>
                              </div>
                              <div className="text-right">
                                <p className="text-sm font-medium text-white">
                                  {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: invoice.currencies.code }).format(invoice.total)}
                                </p>
                                <p className={`text-xs ${invoice.balance > 0 ? 'text-amber-400' : 'text-green-400'}`}>
                                  {invoice.balance > 0 ? 'Outstanding' : 'Paid'}
                                </p>
                  </div>
                </div>
              ))}
                        </div>
                      </div>
                    ) : (
                      <p className="text-sm text-neutral-400">No invoice data available</p>
              )}
            </div>
                </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.salesMetrics && (
            <Link href="/sales" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                Open Sales Dashboard →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl" gradient="purple-pink">
                <div className="p-6 relative overflow-hidden">
                  <Glow variant="top" className="opacity-30 group-hover:opacity-60 transition-opacity duration-700" />
                  <div className="relative z-10">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold text-white">Sales Pipeline</h3>
                      <TrendingUp className="w-5 h-5 text-neutral-400" />
                    </div>
                    {sales.length > 0 ? (
                      <div>
                        <div className="grid grid-cols-2 gap-4 mb-4">
                          <div className="bg-neutral-700/20 rounded-lg p-3">
                            <p className="text-xs text-neutral-400 mb-1">Active Deals</p>
                            <p className="text-lg font-semibold text-white">
                              {sales.filter(sale => sale.status !== 'completed').length}
                            </p>
                          </div>
                          <div className="bg-neutral-700/20 rounded-lg p-3">
                            <p className="text-xs text-neutral-400 mb-1">Pipeline Total</p>
                            <p className="text-lg font-semibold text-white">
                              {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: 'SEK' }).format(calculateTotalPipeline(sales))}
                            </p>
                          </div>
                        </div>
                        
                        <div className="space-y-3 mt-3">
                          {sales.slice(0, 3).map(sale => (
                            <div key={sale.id} className="flex items-start space-x-3">
                              <div className="p-2 bg-purple-500/10 rounded-full">
                                <TrendingUp className={`w-4 h-4 ${sale.status === 'completed' ? 'text-green-400' : 'text-purple-400'}`} />
                              </div>
                              <div className="flex-1 overflow-hidden">
                                <p className="text-sm font-medium text-white truncate" title={sale.customer_name}>{sale.customer_name}</p>
                                <p className="text-xs text-neutral-400">
                                  {new Intl.NumberFormat('sv-SE', { style: 'currency', currency: 'SEK' }).format(sale.amount)}
                                </p>
                                <p className="text-xs text-neutral-400">
                                  <span className={`${
                                    sale.status === 'completed' ? 'text-green-400' : 
                                    sale.status === 'pending' ? 'text-yellow-400' : 
                                    'text-blue-400'
                                  }`}>
                                    {sale.status.charAt(0).toUpperCase() + sale.status.slice(1)}
                                  </span> - {new Date(sale.created_at).toLocaleDateString()}
                                </p>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <p className="text-sm text-neutral-400">No sales data available</p>
                    )}
                  </div>
                </div>
              </AnimatedBorderCard>
            </Link>
          )}
        </div>
      ) : null}

      {/* Gmail Hub, Analytics and Search Console */}
      {visibleWidgets.gmailHub || visibleWidgets.analyticsData || visibleWidgets.searchConsole ? (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          {visibleWidgets.gmailHub && (
            <Link href="/gmail-hub" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                Open Gmail Hub →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="orange-red">
                <div className="p-6 relative overflow-hidden">
                  <Glow variant="right" className="opacity-30 group-hover:opacity-70 transition-opacity duration-700" />
                  <div className="relative z-10">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold text-white">Recent Emails</h3>
                      <Inbox className="w-5 h-5 text-neutral-400" />
                    </div>
                    <div className="space-y-4">
                      {emails.map(email => (
                        <div key={email.id} className="flex items-start space-x-4">
                          <div className={`p-2 ${email.unread ? 'bg-blue-500/20' : 'bg-neutral-700/20'} rounded-full`}>
                            <Inbox className={`w-4 h-4 ${email.unread ? 'text-blue-400' : 'text-neutral-400'}`} />
                          </div>
                          <div className="flex-1 overflow-hidden">
                            <p className={`text-sm font-medium ${email.unread ? 'text-white' : 'text-neutral-300'} truncate`} title={email.subject}>
                              {email.subject}
                            </p>
                            <p className="text-xs text-neutral-400 truncate" title={`${email.from} - ${new Date(email.date).toLocaleDateString('sv-SE')}`}>
                              {email.from} - {new Date(email.date).toLocaleDateString('sv-SE')}
                            </p>
                          </div>
                        </div>
                      ))}
                      {emails.length === 0 && (
                        <p className="text-sm text-neutral-400">No recent emails</p>
                      )}
                    </div>
                  </div>
                </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.analyticsData && (
            <Link href="/analytics" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View Analytics →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="blue-purple">
                <div className="p-6 relative overflow-hidden">
                  <Glow variant="center" className="opacity-30 group-hover:opacity-70 transition-opacity duration-700" />
                  <div className="relative z-10">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold text-white">Analytics Overview</h3>
                      <LineChart className="w-5 h-5 text-neutral-400" />
                    </div>
                    {analyticsData ? (
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-neutral-400">Pageviews</span>
                          <span className="text-sm font-medium text-white">{analyticsData.pageviews.toLocaleString()}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-neutral-400">Visitors</span>
                          <span className="text-sm font-medium text-white">{analyticsData.visitors.toLocaleString()}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-neutral-400">Bounce Rate</span>
                          <span className="text-sm font-medium text-white">{analyticsData.bounce_rate.toFixed(1)}%</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-neutral-400">Avg. Session</span>
                          <span className="text-sm font-medium text-white">{analyticsData.avg_session_duration.toFixed(1)}s</span>
                        </div>
                        
                        <div className="mt-4 pt-4 border-t border-neutral-700">
                          <h4 className="text-sm font-medium text-white mb-2">Top Pages</h4>
                          {topWebsites && topWebsites.length > 0 ? (
                            topWebsites.map((site, index) => (
                              <div key={index} className="flex justify-between text-xs mb-1">
                                <span className="text-neutral-400 truncate max-w-[70%]" title={site.url}>{site.url}</span>
                                <span className="text-neutral-300">{site.pageviews.toLocaleString()}</span>
                              </div>
                            ))
                          ) : (
                            <div className="text-xs text-neutral-400">No data available</div>
                          )}
                        </div>
                      </div>
                    ) : (
                      <p className="text-sm text-neutral-400">No analytics data available</p>
                    )}
                  </div>
                </div>
              </AnimatedBorderCard>
            </Link>
          )}

          {visibleWidgets.searchConsole && (
            <Link href="/marketing" className="block relative group">
              <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
                View Search Console →
              </span>
              <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="green-blue">
                <div className="p-6 relative overflow-hidden">
                  <Glow variant="left" className="opacity-30 group-hover:opacity-70 transition-opacity duration-700" />
                  <div className="relative z-10">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold text-white">Search Performance</h3>
                      <LineChart className="w-5 h-5 text-neutral-400" />
                    </div>
                    {searchConsoleData ? (
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-neutral-400">Clicks</span>
                          <span className="text-sm font-medium text-white">{searchConsoleData.clicks.toLocaleString()}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-neutral-400">Impressions</span>
                          <span className="text-sm font-medium text-white">{searchConsoleData.impressions.toLocaleString()}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-neutral-400">CTR</span>
                          <span className="text-sm font-medium text-white">{searchConsoleData.ctr.toFixed(1)}%</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-neutral-400">Avg. Position</span>
                          <span className="text-sm font-medium text-white">{searchConsoleData.position.toFixed(1)}</span>
                        </div>
                        
                        <div className="mt-4 pt-4 border-t border-neutral-700">
                          <h4 className="text-sm font-medium text-white mb-2">Top Search Terms</h4>
                          {topSearchTerms && topSearchTerms.length > 0 ? (
                            topSearchTerms.map((term, index) => (
                              <div key={index} className="flex justify-between text-xs mb-1">
                                <span className="text-neutral-400 truncate max-w-[70%]" title={term.term}>{term.term}</span>
                                <span className="text-neutral-300">{term.clicks} clicks</span>
                              </div>
                            ))
                          ) : (
                            <div className="text-xs text-neutral-400">No data available</div>
                          )}
                        </div>
                      </div>
                    ) : (
                      <p className="text-sm text-neutral-400">No search data available</p>
                    )}
                  </div>
                </div>
              </AnimatedBorderCard>
            </Link>
          )}
        </div>
      ) : null}

      {/* Scheduled Tasks - Split into two cards for better symmetry */}
      {visibleWidgets.cronJobs && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          <Link href="/settings/cron" className="block lg:col-span-2 relative group">
            <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
              Manage Scheduled Tasks →
            </span>
            <AnimatedBorderCard className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl h-[350px]" gradient="purple-pink">
              <div className="p-6 relative overflow-hidden">
                <Glow variant="bottom" className="opacity-30 group-hover:opacity-70 transition-opacity duration-700" />
                <div className="relative z-10">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-semibold text-white">Scheduled Tasks</h3>
                    <Clock className="w-5 h-5 text-neutral-400" />
                  </div>
                  {cronJobs.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr>
                            <th className="text-left text-sm font-medium text-neutral-400 pb-4">Task</th>
                            <th className="text-left text-sm font-medium text-neutral-400 pb-4">Schedule</th>
                            <th className="text-right text-sm font-medium text-neutral-400 pb-4">Status</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-neutral-700">
                          {cronJobs.slice(0, 4).map((job) => (
                            <tr key={job.id}>
                              <td className="py-3 text-sm font-medium text-white">
                                <div className="truncate max-w-[180px]" title={job.name || job.job_type || "Unknown Task"}>
                                  {job.name || job.job_type || "Unknown Task"}
                                </div>
                              </td>
                              <td className="py-3 text-sm text-neutral-400">
                                {job.schedule || "Custom"}
                              </td>
                              <td className="py-3 text-sm text-right">
                                <span className={`px-2 py-1 rounded text-xs ${
                                  job.status === 'active' 
                                    ? 'bg-green-500/20 text-green-400' 
                                    : 'bg-neutral-700/50 text-neutral-400'
                                }`}>
                                  {job.status === 'active' ? 'Active' : 'Paused'}
                                </span>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center h-48">
                      <p className="text-sm text-neutral-400 mb-4">No scheduled tasks configured</p>
                      <Button variant="outline" size="sm" className="bg-neutral-700 hover:bg-neutral-600">
                        Create Scheduled Task
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            </AnimatedBorderCard>
          </Link>
          <AnimatedBorderCard className="p-6 bg-neutral-800 border-neutral-700 shadow-lg h-[350px] flex flex-col justify-between" gradient="green-blue">
            <div>
              <h3 className="text-lg font-semibold text-white mb-4">Task Status</h3>
              <div className="space-y-4">
                {cronJobs.length > 0 ? (
                  <>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-neutral-400">Active Tasks</span>
                      <span className="text-sm font-medium text-white">
                        {cronJobs.filter(job => job.status === 'active').length}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-neutral-400">Paused Tasks</span>
                      <span className="text-sm font-medium text-white">
                        {cronJobs.filter(job => job.status !== 'active').length}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-neutral-400">Successful</span>
                      <span className="text-sm font-medium text-green-400">
                        {cronJobs.filter(job => !job.error_message).length}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-neutral-400">Failed</span>
                      <span className="text-sm font-medium text-red-400">
                        {cronJobs.filter(job => job.error_message).length}
                      </span>
                    </div>
                  </>
                ) : (
                  <p className="text-sm text-neutral-400">No tasks to display</p>
                )}
              </div>
            </div>
            <Button variant="outline" className="bg-neutral-700 hover:bg-neutral-600 w-full" asChild>
              <Link href="/settings/cron">Manage All Tasks</Link>
            </Button>
          </AnimatedBorderCard>
        </div>
      )}

      {/* Task Overview */}
      {visibleWidgets.taskOverview && (
        <div className="mb-6">
          <Link href="/tasks" className="block relative group">
            <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
              Open Task Manager →
            </span>
            <Card className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl relative overflow-hidden">
              <GlowingEffect 
                spread={40} 
                glow={true} 
                disabled={false} 
                proximity={100} 
                inactiveZone={0.01}
                borderWidth={2}
              />
              <div className="p-6 relative z-10">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold text-white">Task Overview</h3>
                  <div className="flex gap-2 items-center">
                    <CheckCircle className="w-5 h-5 text-neutral-400" />
                  </div>
                </div>
                {/* ... existing code ... */}
          </div>
        </Card>
          </Link>
      </div>
      )}

      {/* Recent Meetings */}
      {visibleWidgets.recentMeetings && (
        <div className="mb-6">
          <Link href="/calendar" className="block relative group">
            <span className="absolute right-3 top-3 text-xs text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity z-20">
              Open Calendar →
            </span>
            <Card className="bg-neutral-800 border-neutral-700 shadow-lg transition-all hover:bg-neutral-750 hover:shadow-xl relative overflow-hidden">
              <GlowingEffect 
                spread={40} 
                glow={true} 
                disabled={false} 
                proximity={100} 
                inactiveZone={0.01}
                borderWidth={2}
                variant="white"
              />
              <div className="p-6 relative z-10">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold text-white">Upcoming Meetings</h3>
                  <div className="flex gap-2 items-center">
                    <Calendar className="w-5 h-5 text-neutral-400" />
    </div>
                </div>
                {/* ... existing code ... */}
              </div>
            </Card>
          </Link>
        </div>
      )}
    </div>
  );
} 